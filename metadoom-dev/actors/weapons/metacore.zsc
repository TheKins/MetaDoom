/*
----------------------------
MetaDoom
Actor Definitions
Weapon Core
----------------------------

All weapons inherit from MetaDoomWeapon, and hand off to its states
when the player expires. This is used for the first-person death sequences.
*/

Class MetaDoomWeapon : Weapon
{
	Default
	{
		Weapon.Kickback 100;
		Weapon.BobStyle "Smooth";
		//+INVENTORY.ALWAYSPICKUP
		+DONTGIB
	}
  	States
	{
	DeadDude:
		TNT1 A 1 Offset(0,32)
		{
			A_ClearOverlays();
			A_OverlayScale(PSP_WEAPON, 1, 1);
			A_StopSound(CHAN_BODY);
			A_StopSound(CHAN_WEAPON);
			A_StopSound(CHAN_6);
			A_ZoomFactor(1.0, ZOOM_INSTANT);
			A_TakeInventory("PistolFlashlight", 1);
		}
		TNT1 A 0 A_JumpIfInventory("DeathStateGibbed", 1, "DeathGibbed");
		TNT1 A 0 A_JumpIfInventory("DeathStateExplosion", 1, "DeathAnim2");
		TNT1 A 0 A_JumpIfInventory("DeathStateFire", 1, "DeathAnimCrispyCritter");
		TNT1 A 0 A_JumpIfInventory("DeathStateElec", 1, "DeathAnimZappy");
		goto DeathAnim1;
	DeathAnim1:
		TNT1 A 0 Offset(0,32);
		TNT1 A 0 A_GiveInventory("DeathStateFallingDown", 1);
		TNT1 A 0 A_StopSound(CHAN_BODY);
		TNT1 A 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		DED1 ABC 1;
		DED1 DE 1;
		DED1 FGHIJ 2;
		DED1 J 11;
		DED1 LMNOPQRSTU 1;
		DED1 U -1;
		loop;
	DeathAnim2:
		TNT1 A 0 Offset(0,32);
		TNT1 A 0 A_GiveInventory("DeathStateFallingDown", 1);
		TNT1 A 0 A_GiveInventory("DeathStateSpeedyDrop", 1);
		TNT1 A 0 A_StopSound(CHAN_BODY);
		TNT1 A 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		DED2 ACEGIKLMNOPQRSTUVW 1;
		DED2 X -1;
		loop;
	DeathAnimCrispyCritter:
		TNT1 A 0 Offset(0,32);
		TNT1 A 0 A_StopSound(CHAN_BODY);
		TNT1 A 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		WAVE ABCD 3;
		WAVE ABCD 3;
		WAVE ABCD 3;
		WAVE ABCD 3;
		TNT1 A 0 A_GiveInventory("DeathStateFallingDown", 1);
		WAVE A 1 Offset(0,33);
		WAVE A 1 Offset(0,35);
		WAVE A 1 Offset(0,39);
		WAVE B 1 Offset(0,44);
		WAVE B 1 Offset(0,49);
		WAVE B 1 Offset(0,55);
		WAVE C 1 Offset(0,60);
		WAVE C 1 Offset(0,70);
		WAVE C 1 Offset(0,80);
		WAVE D 1 Offset(0,90);
		TNT1 A -1;
		loop;
	DeathAnimZappy:
		TNT1 A 0 Offset(0,32);
		TNT1 A 0 A_StopSound(CHAN_BODY);
		TNT1 A 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		PZAP ABCDABCDABCD 1 A_Quake (3,3,0,32,0);
		PZAP ABCDABCDABCD 1 A_Quake (3,3,0,32,0);
		PZAP ABCDABCDABCD 1 A_Quake (3,3,0,32,0);
		PZAP ABCDABCDABCD 1 A_Quake (3,3,0,32,0);
		TNT1 A 0 A_GiveInventory("DeathStateFallingDown", 1);
		TNT1 A 0 A_GiveInventory("DeathStateSpeedyDrop", 1);
		DED1 LLLMMMNNNOOPQRSTU 1;
		DED1 U -1;
		loop;
	DeathGibbed:
		TNT1 A -1;
		loop;
	MeleePunch:
		TNT1 A 0 
		{
			A_ClearOverlays();
			A_OverlayScale(PSP_WEAPON, 1, 1);
		}
		PNCH A 0 A_JumpIfInventory("PowerMetaBerserkTimer", 1, "MeleePunchBerserk");
		PNCH A 0 A_JumpIfInventory("PowerStrength", 1, "MeleePunchBerserk");
		PNCH A 1 
		{
			A_PlaySound("weapons/melee/wiff");
			
			if (CountInv("PowerMetaDamage") > 0)
			{
				A_PlaySound("powerups/quad/use", CHAN_5);
			}
		}
		PNCH BD 1; //PNCH BCDE 1 
		PNCH F 1 A_CustomPunch(5 * random(1, 5), TRUE, CPF_NOTURN,"MetaMeleePuff",80,0,0,"BasicArmorBonus","weapons/melee/hit");
		PNCH GHI 1;
		PNCH I 5;
		PNCH H 0 A_PlaySound("weapons/swap");
		PNCH HGFDB 1; //PNCH HGFEDCBA 1
		TNT1 A 0 Offset(0,90) A_TakeInventory("MeleePunch", 999);
		TNT1 A 0 Offset(0,90) A_Jump(256, "Select");
		stop;
	MeleePunchBerserk:
		TNT1 A 0 
		{
			A_ClearOverlays();
			A_OverlayScale(PSP_WEAPON, 1, 1);
		}
		PNCH A 1 
		{
			A_PlaySound("weapons/melee/wiff");
			
			if (CountInv("PowerMetaDamage") > 0)
			{
				A_PlaySound("powerups/quad/use", CHAN_5);
			}
		}
		PNCH BD 1; //PNCH BCDE 1 
		PNCH F 1 A_CustomPunch(60 * random(1, 3), TRUE, CPF_NOTURN,"MetaBerserkPuff",80,0,0,"BasicArmorBonus","weapons/melee/hit");
		PNCH GHI 1;
		PNCH I 2;
		PNCH H 0 A_PlaySound("weapons/swap");
		PNCH HGFDB 1; //PNCH HGFEDCBA 1
		TNT1 A 0 Offset(0,90) A_TakeInventory("MeleePunch", 999);
		TNT1 A 0 Offset(0,90) A_Jump(256, "Select");
		stop;
		
	Overlay.GenericButtonPress:
		TNT1 A 1 A_WeaponOffset(0,34,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		TNT1 A -1;
		stop;
	}
	
	// Smooth Raise and Lower code by Boondorl
	action void A_SmoothRaise(int maxSpeed = 28)
	{
		if (!player)
			return;
		
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			player.mo.DropWeapon();
			return;
		}
		
		if (!player.ReadyWeapon)
			return;
		
		maxSpeed = abs(maxSpeed);
		
		let psp = player.GetPSprite(PSP_WEAPON);
		double multi = (psp.y - WEAPONTOP) / (WEAPONBOTTOM - WEAPONTOP);
		if (multi ~== 0)
			--psp.y;
		else
			psp.y -= ceil(maxSpeed*multi);
		
		if (psp.y > WEAPONTOP)
			return;
		
		psp.y = WEAPONTOP;
		psp.SetState(player.ReadyWeapon.GetReadyState());
	}
	
	action void A_SmoothLower(int maxSpeed = 28)
	{
		if (!player)
			return;
		
		if (!player.ReadyWeapon)
		{
			player.mo.BringUpWeapon();
			return;
		}
		
		let psp = player.GetPSprite(PSP_WEAPON);
		
		if ( psp.y < WEAPONTOP ) psp.y = WEAPONTOP; // [Py] in case weapon offsets cause the weapon to go above the usual height (i.e. lightning gun offsets)
		
		if (player.morphTics || (player.cheats & CF_INSTANTWEAPSWITCH))
			psp.y = WEAPONBOTTOM;
		else
		{
			maxSpeed = abs(maxSpeed);
			
			double multi = (psp.y - WEAPONTOP) / (WEAPONBOTTOM - WEAPONTOP);
			if (multi ~== 0)
				++psp.y;
			else
				psp.y += ceil(maxSpeed*multi);
		}
		
		if (psp.y < WEAPONBOTTOM)
			return;
		
		if (player.playerstate == PST_DEAD)
		{
			player.SetPsprite(PSP_FLASH, null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		
		player.SetPsprite(PSP_FLASH, null);
		player.mo.BringUpWeapon();
	}
}

class MeleePunch : _Boolean {}
// Bullet Puffs

class MetaBulletPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		Decal "BulletChip";
		
		+ALLOWTHRUFLAGS
		+THRUSPECIES
		Species "NoHitScan";
	}
	
	States
	{
	Spawn:
		PUFF A 0;
		PUFF A 4 BRIGHT A_SpawnDebris("MonsterTracerSpark");
		PUFF B 2 BRIGHT A_SetTranslucent(0.9,0);
		PUFF B 2 BRIGHT A_PlaySound("ricochet");
		PUFF CD 4 BRIGHT;
		Stop;
	Melee:
		PUFF CD 4;
		Stop;
	}
}

class MetaTurretPuff : MetaBulletPuff
{
	Default
	{
		damagetype "ChaingunTurret";
	}
}

class MetaMeleePuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		damagetype "Fist";
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		AttackSound "weapons/melee/hitwall";
		SeeSound "weapons/melee/hit";
		Obituary "$OB_METAFIST";
	}
	
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF CD 4;
		Stop;
	}
}

class MetaBerserkPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		damagetype "BerserkFist";
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		AttackSound "weapons/melee/hitwall";
		SeeSound "weapons/melee/hit";
		Obituary "$OB_BERSERK";
	}
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF CD 4;
		Stop;
	}
}

// For Holy Water Pistol
class GimmeWater : CustomInventory
{
	Default
	{
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ISHEALTH
		+INVENTORY.ISARMOR
		Inventory.PickupSound "weapons/waterpistol/ammo";
	}
		
	States
	{
	Spawn:
		MEGA A 6 BRIGHT;
		Stop;
	Pickup:
		TNT1 A 0 
		{
			player.bonuscount = BONUSADD;
			A_PlaySound("weapons/waterpistol/ammo", CHAN_PICKUP|CHAN_NOPAUSE, 1, false, ATTN_NONE);
			if (player != NULL)
			{
				PrintPickupMessage(player.mo, "$GOTHOLYWATER");
			}
			//A_Log("$GOTHOLYWATER",1);
			A_GiveInventory("HolyWater", 1);
		}
		Stop;
	}
}	