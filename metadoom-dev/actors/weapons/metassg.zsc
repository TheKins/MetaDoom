/*
----------------------------
MetaDoom
Actor Definitions
Super Shotgun
----------------------------
*/

class MeatHookRefill : _Boolean {}

// Meathook code by Agent_Ash aka Jekyll Grim Payne

class MetaSuperShotgunPickup : WeaponGiver
{
	Default
	{
		DropItem "MetaSuperShotgun";
		Inventory.PickupMessage "$GOTSHOTGUN2";
		Inventory.PickupSound "weapons/ssg/get";
	}
	
	States
	{
	Spawn:
		SSG2 Z 0;
		SSG2 Z 0 { bDROPPED = 0; }
		SSG2 Z -1;
		Stop;
	}
}

class MetaSuperShotgun : MetaDoomWeapon
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 8;
		Weapon.AmmoType1 "Shell";
		Weapon.AmmoType2 "Shell";
		Inventory.PickupMessage "$GOTSHOTGUN2";
		Obituary "$OB_MPSSHOTGUN";
		Tag "$TAG_SUPERSHOTGUN";
		Inventory.PickupSound "weapons/ssg/get";
		Weapon.UpSound "weapons/ssg/use";
		+WEAPON.ALT_AMMO_OPTIONAL
		//$Category "Weapons/MetaDoom"
		//$Title "Super Shotgun"
		//$NotAngled
		//$Color 14
	}
	
	MetaHookProjectile hook;
	bool hookFired;
	bool draggingPlayer;
	int hooktimer;
	int hookmeter;

	// I don't know what on earth any of this does - some 3D calculation stuff?
	// but it's needed for the Meathook to work so here it is.
	vector2 FindHooktargetOfs(int atkdist = 320)
	{
		vector2 ofs;			
		double closestDist = double.infinity;
		actor hooktarget;
		BlockThingsIterator itr = BlockThingsIterator.Create(owner,atkdist);
		while (itr.next())
		{
			let next = itr.thing;
			if (next == owner)
				continue; 
			if (!next.bShootable || !(next.bIsMonster || (next is "PlayerPawn") || (next is "MetaMeathookTarget")))
				continue;
			double dist = owner.Distance3D(next);
			if (dist > atkdist)
				continue;
			if (dist < closestDist)
				closestDist = dist;
			if (!owner.CheckSight(next,SF_IGNOREWATERBOUNDARY))
				continue;
			vector3 targetpos = LevelLocals.SphericalCoords((owner.pos.x,owner.pos.y,owner.player.viewz),next.pos+(0,0,next.default.height*0.5),(owner.angle,owner.pitch));	
			if (abs(targetpos.x) > 11 || abs(targetpos.y) > 11)
			{
				continue;
			}
			ofs = targetpos.xy;
		}
		return ofs;
	}
	
	States
	{
	Ready:
		SSG2 A 1 
		{
			// Don't let the player switch weapon if they're currently Meathookin'
			if (!invoker.hook)
			{
				A_WeaponReady();
			} else {
				A_WeaponReady(WRF_DISABLESWITCH);
			}
		}
		"####" A 0 A_JumpIfInventory("MeleePunch", 1, "MeleePunch");
		Loop;
	Deselect:
		SSG2 A 0 A_JumpIf(health <= 0, "DeadDude");
		SSG2 A 0 A_PlaySound("weapons/swap");
	FinishDeselect:
		SSG2 A 1 A_SmoothLower();
		Loop;
	Select:
		SSG2 A 0
		{
			A_Overlay(-2, "Overlay.HookManager");
			A_Overlay(2, "Overlay.CounterManager");
			A_OverlayScale(PSP_WEAPON, 1, 1);
		}
	FinishSelect:
		SSG2 A 1 A_SmoothRaise();
		loop;
	AltFire:
		// If Mapbreakers are disabled, revert to old behavior of just doing the
		// primary-fire thing. If the hook's in the air, don't do a damn thing.
		SSG2 A 0 A_JumpIf(meta_mapbreakers == 0, "Fire");
		SSG2 A 0 A_JumpIf(invoker.hookmeter < 6, "DryFire");
		SSG2 A 3 A_JumpIf(invoker.hook != null, "Ready");
		SSG2 A 10
		{
			if (!invoker.hook)
			{
				invoker.hookmeter = 0;
				invoker.hooktimer = 0;
				A_StartSound("weapons/ssg/hook/fire",CHAN_AUTO);
				vector2 ofs = invoker.FindHooktargetOfs();
				invoker.hook = MetaHookProjectile(A_SpawnProjectile("MetaHookProjectile",37,angle:ofs.x,flags:CMF_AIMDIRECTION,pitch:pitch+ofs.y));
			}
			
			A_Overlay(14, "Overlay.AltFireRecoil");
		}
		goto Ready;
	Fire:
		SSG2 A 0 
		{
			A_Overlay(-2, "Overlay.HookWhileFiring");
			A_OverlayFlags (-2, PSPF_ADDWEAPON, 1);
			A_Overlay(2, "Overlay.CounterWhileFiring");
		}
		SSG2 A 3;
		SSG2 B 3 bright
		{
			A_FireBullets (11.2, 7.1, 20, 5, "MetaBulletPuff");
			A_PlaySound ("weapons/ssg/fire", CHAN_WEAPON);
			
			if (CountInv("PowerMetaDamage") > 0)
			{
				A_PlaySound("powerups/quad/use", CHAN_5);
			}
			
			A_GunFlash();
			A_Quake (3,5,0,750,0);
			A_ZoomFactor(0.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			A_Overlay(3, "Overlay.FiringRecoil");
		}
		SSG2 C 3;
		SSG2 D 3;
		SSG2 E 3;
		SSG2 E 0 A_CheckReload();
		SSG2 FGHIJKLM 2;
		SSG2 N 2
		{
			A_PlaySound ("weapons/ssg/open", CHAN_BODY);
			if (meta_perf_spentbrass == 1)
			{
				A_FireProjectile("SSGCaseSpawner",5,0,6,4);
				A_FireProjectile("SSGCaseSpawner",5,0,6,4);
			}
		}
		SSG2 OPQ 3;
		SSG2 R 3 A_PlaySound ("weapons/ssg/load", CHAN_BODY);
		SSG2 TU 3;
		SSG2 V 1 A_PlaySound ("weapons/ssg/close", CHAN_BODY);
		SSG2 WXY 2;
		SSG2 A 0 A_Overlay(2, "Overlay.CounterManager");
		Goto Ready;
	Flash:
		TNT1 I 4 Bright A_Light1;
		TNT1 J 3 Bright A_Light2;
		Goto LightDone;
	DryFire:
		SSG2 A 10 { A_Overlay(14, "Overlay.GenericButtonPress"); A_PlaySound("weapons/shotgun/dry", CHAN_BODY); }
		goto Ready;
	Spawn:
		SSG2 Z -1;
		Stop;
		
	Overlay.HookManager:
		SSGH A 0
		{
			if (!meta_mapbreakers || invoker.hook != null)
			{
				A_Overlay(-2, "Overlay.NoHook");
			} else {
				A_Overlay(-2, "Overlay.GotHook");
			}
		}
		loop;
	Overlay.NoHook:
		TNT1 A 1;
		TNT1 A 0 A_Overlay(-2, "Overlay.HookManager");
		loop;
	Overlay.GotHook:
		SSGH A 1;
		SSGH A 0 A_Overlay(-2, "Overlay.HookManager");
		loop;
	Overlay.HookWhileFiring:
		SSGH A 0
		{
			if (!meta_mapbreakers || invoker.hook != null)
			{
				A_OverlayFlags (-2, PSPF_RENDERSTYLE, 1);
				A_OverlayRenderstyle (-2, STYLE_None);
			}
		}
		SSGH A 3;
		TNT1 B 1 bright;
		TNT1 B 1 bright;
		TNT1 B 1 bright;
		TNT1 C 1 bright;
		TNT1 C 1 bright;
		TNT1 C 1 bright;
		SSGH D 1;
		SSGH D 1;
		SSGH D 1;
		SSGH E 1;
		SSGH E 1;
		SSGH E 1;
		SSGH E 0
		{
			if (CountInv("Shell") < 2)
			{
				A_Overlay(-2, "Overlay.HookManager");
			}
		}
		SSGH FGHIJKLM 2;
		TNT1 N 2;
		TNT1 OPQ 3;
		TNT1 R 3;
		SSGH TU 3;
		SSGH V 1;
		SSGH WXY 2;
		SSGH A 0 A_Overlay(-2, "Overlay.HookManager");
		goto Overlay.HookManager;
	
	Overlay.CounterManager:
		PLAM A 0
		{
			if (!meta_mapbreakers)
			{
				A_Overlay(2, "Overlay.CounterDisplay0");
			}
			
			// thanks to 3saster for teaching me what a switch statement is		
			switch(invoker.hookmeter)
			{
				case 6: A_Overlay(2, "Overlay.CounterDisplay6"); break;
				case 5: A_Overlay(2, "Overlay.CounterDisplay5"); break;
				case 4: A_Overlay(2, "Overlay.CounterDisplay4"); break;
				case 3: A_Overlay(2, "Overlay.CounterDisplay3"); break;
				case 2: A_Overlay(2, "Overlay.CounterDisplay2"); break;
				case 1: A_Overlay(2, "Overlay.CounterDisplay1"); break;
				case 0: 
				default: A_Overlay(2, "Overlay.CounterDisplay0"); break;
			}
		}
		loop;
		
	Overlay.CounterDisplay0:
		TNT1 A 1 bright;
		TNT1 A 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay1:
		SSGC A 1 bright;
		SSGC A 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay2:
		SSGC B 1 bright;
		SSGC B 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay3:
		SSGC C 1 bright;
		SSGC C 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay4:
		SSGC D 1 bright;
		SSGC D 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay5:
		SSGC E 1 bright;
		SSGC E 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterDisplay6:
		SSGC F 1 bright;
		SSGC F 0 A_Overlay(2, "Overlay.CounterManager");
		loop;
	Overlay.CounterWhileFiring:
		TNT1 A 1;
		loop;
		
	Overlay.FiringRecoil:
		TNT1 B 1;
		TNT1 B 1 bright { A_WeaponOffset(0,45, WOF_INTERPOLATE); A_SetPitch(pitch-4, SPF_INTERPOLATE); }
		TNT1 B 1 bright { A_WeaponOffset(0,58, WOF_INTERPOLATE); A_SetPitch(pitch-4, SPF_INTERPOLATE); A_ZoomFactor(0.95,ZOOM_NOSCALETURNING); }
		TNT1 C 1 bright { A_WeaponOffset(0,54, WOF_INTERPOLATE); A_ZoomFactor(1.0,ZOOM_NOSCALETURNING); }
		TNT1 C 1 bright { A_WeaponOffset(0,48, WOF_INTERPOLATE); A_SetPitch(pitch+1, SPF_INTERPOLATE); }
		TNT1 C 1 bright { A_WeaponOffset(0,45, WOF_INTERPOLATE); A_SetPitch(pitch+1, SPF_INTERPOLATE); }
		TNT1 D 1 { A_WeaponOffset(0,42, WOF_INTERPOLATE); A_SetPitch(pitch+1, SPF_INTERPOLATE); }
		TNT1 D 1 { A_WeaponOffset(0,38, WOF_INTERPOLATE); A_SetPitch(pitch+1, SPF_INTERPOLATE); }
		TNT1 D 1 { A_WeaponOffset(0,36, WOF_INTERPOLATE); A_SetPitch(pitch+2, SPF_INTERPOLATE); }
		TNT1 E 1 { A_WeaponOffset(0,34, WOF_INTERPOLATE); A_SetPitch(pitch+2, SPF_INTERPOLATE); }
		TNT1 E 1 A_WeaponOffset(0,33, WOF_INTERPOLATE);
		TNT1 E 1 A_WeaponOffset(0,32, WOF_INTERPOLATE);
		TNT1 A -1;
		stop;
		
	Overlay.AltFireRecoil:
		TNT1 A 1 A_WeaponOffset(0,45,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,48,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,45,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,42,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,38,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,36,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,34,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,33,WOF_INTERPOLATE);
		TNT1 A 1 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		TNT1 A -1;
		stop;
	}
	
	override void Tick()
	{
		if (owner != null && owner.CountInv("MeatHookRefill") > 0)
		{
			if (hookmeter != 6)
			{
				hooktimer = 0;
				hookmeter = 6;
				owner.A_StartSound("weapons/ssg/hook/charge", 17, CHANF_LOCAL, 0.5, ATTN_NONE, 1.0);
			}
			owner.A_TakeInventory("MeatHookRefill", 999);
		}
		
		if (owner != null && owner.health > 0 && hookmeter < 6 && meta_mapbreakers)
		{
			hooktimer++;
		}
		
		if (hooktimer >= 87 && hookmeter < 6)
		{
			hooktimer = 0;
			hookmeter++;
			
			if (hookmeter == 6)
			{
				owner.A_StartSound("weapons/ssg/hook/charge", 17, CHANF_LOCAL, 0.5, ATTN_NONE, 1.0);
			}
		}
	}
	
	// Break any active grappling hook on teleport
	override bool PreTeleport(vector3 destpos, double destangle, int flags)
	{
		hook.A_Remove(AAPTR_DEFAULT,RMVF_EVERYTHING);
		hook = null;
		hooktimer = 0;
		return Super.PreTeleport(destpos, destangle, flags);
	}
	
	override void PostBeginPlay ()
	{
		Super.PostBeginPlay ();
		if (meta_mapbreakers)
		{
			hookmeter = 6;
		}
	}
}

Class MetaHookProjectileTrail : Actor
{
	Default
	{
		+NOINTERACTION
	}
	states 
	{
	Spawn:
		TNT1 A 0;
		SMHT A 1;
		stop;
	}
}

class MetaNothingPuff : Actor
{
	Default
	{
		+NOINTERACTION
		+NOGRAVITY
		+ALWAYSPUFF
		+PUFFONACTORS
		+BLOODLESSIMPACT
	}
	States
	{
	Spawn:
		TNT1 AA 0;
		Stop;
	}
}

Class MetaHookProjectile : Actor
{
	Default
	{
		MetaHookProjectile.maxdistance 720;
		projectile;
		DamageFunction (0);
		speed 25;
		+HITTRACER
		+BLOODSPLATTER
		+BLOCKASPLAYER
		+SKYEXPLODE
		Radius 13;
		Height 8;
	}
	
	vector3 spawnPos;
	int maxdistance;
	int flytime;
	MetaHookControl control;
	property maxdistance : maxdistance;
	bool hitadude;
	actor HookedDude;
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		spawnPos = pos;
	}
	override void Tick()
	{
		super.Tick();
		if (isFrozen())
			return;
			
		// There's almost certainly a less crap way to do this, but...
		A_CustomRailgun (0, 0, 0, 0, RGF_SILENT|RGF_NOPIERCING|RGF_CENTERZ, 1, 0, "MetaNothingPuff", 0, 0, 4096, 1, 32, 0, "MetaHookProjectileTrail");
		
		if (level.Vec3Diff(pos, spawnPos).length() > maxdistance && !inStateSequence(curstate,FindState("Flyback")))
			SetStateLabel("Flyback");
	}
	states
	{
	Spawn:
		SMHK A 4 A_StartSound("weapons/ssg/hook/chain", CHAN_BODY, 0, 1.0, ATTN_NORM, frandom (0.9, 1.2));
		loop;
	Death:
		TNT1 A 0 A_StartSound("weapons/ssg/hook/hitworld", 13);
		goto Flyback;
	XDeath:
		//TNT1 A 0 A_Log("XDeath State");
		TNT1 A 1
		{
			if (target && target.player)
			{
				if (hookeddude && (hookeddude.bISMONSTER || hookeddude is "MetaMeathookTarget" || hookeddude is "PlayerPawn") && hookeddude.health > 0)
				{
					hookeddude.SetStateLabel("Pain");
					hookeddude.vel = (0,0,0);
					target.A_StartSound("weapons/ssg/hook/chain", CHAN_BODY, 0, 1.0, ATTN_NORM, frandom (0.9, 1.2));
					target.speed = 0;
					target.vel = target.Vec3To(self).Unit() * 15;
					
					FLineTraceData FootSurfaceData;
					target.LineTrace(atan2(target.vel.y, target.vel.x), target.radius*2, 0, TRF_BLOCKSELF|TRF_SOLIDACTORS, offsetz: 8, data:FootSurfaceData);
					FLineTraceData SkullSurfaceData;
					target.LineTrace(atan2(target.vel.y, target.vel.x), target.radius*2, 0, TRF_BLOCKSELF|TRF_SOLIDACTORS, offsetz: target.height - 8, data:SkullSurfaceData);
					
					if (SkullSurfaceData.HitType == SkullSurfaceData.TRACE_HitWall && FootSurfaceData.HitType == FootSurfaceData.TRACE_HitWall)
					{
						if (meta_developer)
							Console.printf("Hooking totally blocked, abort");
						self.Destroy();
					} else if (SkullSurfaceData.HitType == SkullSurfaceData.TRACE_HitWall)
					{
						if (meta_developer)
							Console.printf("Hooking blocked at head, push down");
						target.vel.z = -8;
					} else if (FootSurfaceData.HitType == FootSurfaceData.TRACE_HitWall)
					{
						if (meta_developer)
							Console.printf("Hooking blocked at feet, push up");
						target.vel.z = 8;
					}
					
					if (Distance3D(target) <= 64 || hookeddude.health <= 0 || !hookeddude || target.blockingmobj != null || target.Distance3D(hookeddude) <= 64)
					{
						target.speed = target.default.speed;
						destroy();
					}
					target.speed = target.default.speed;
				} else {
					A_StartSound("weapons/ssg/hook/hitactor", 13);
					SetStateLabel("Flyback");
				}
			}
		}
		wait;
	// This is used to pull in JKP's example to have monsters get pulled towards
	// the players instead of vice versa. We might want this later.
	/*
	XDeath:
		TnT1 A 0 A_Scream();
		TNT1 A 0 A_Log("XDeath State");
		BAL1 A 1 {
			if (tracer) {
				tracer.GiveInventory("MetaHookControl",1);
				control = MetaHookControl(tracer.FindInventory("MetaHookControl"));
				control.master = self;
			}
		}
		goto Flyback;
	*/
	Flyback:
		SMHK A 0 
		{
			A_StartSound("weapons/ssg/hook/chain", CHAN_BODY, 0, 1.0, ATTN_NORM, frandom (0.9, 1.2));
			bNOCLIP = true;
		}
		SMHK AAAA 1
		{
			if (target) {
				flytime++;
				vel = Vec3To(target).Unit() * 30;
				if (Distance3D(target) <= 64 || flytime > 35*5) {
					if (tracer)
						tracer.TakeInventory("MetaHookControl",1);
					target.GiveInventory("MeatHookRefill",1);
					destroy();
				}
			}
		}
		loop;
	}
	
	// This is used for differentiating between monsters/players (which is what
	// we want to hook onto) and environment props and such.
	override int SpecialMissileHit (Actor victim)
	{		
		if ((victim.bISMONSTER == true || victim is "MetaMeathookTarget" || victim is "PlayerPawn") && victim.health > 0 && victim != target)
		{
			victim.A_StartSound("weapons/ssg/hook/stick", 13);
			hitadude = true;
			hookeddude = victim;
		}
		
		return -1;
	}
}
		
// Handles getting pulled towards a thing. Typically towards a monster pulling
// the player towards them by way of some prehensile appendage.
Class MetaHookControl : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
		+INVENTORY.PERSISTENTPOWER;
		inventory.maxamount 1;
	}	
	
	override void Tick() {}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || !master)
		{
			destroy();
			return;	
		}
		// Using SetOrigin has a bad habit of "skipping" line triggers the player
		// passes when being pulled. So instead, we go for the gross hacks.
		//owner.SetOrigin(master.pos-(0,0,owner.default.height*0.5),true);
		owner.vel = master.vel;
		
		// Handle pulled players getting blocked by geometry
		FLineTraceData FootSurfaceData;
		owner.LineTrace(atan2(owner.vel.y, owner.vel.x), owner.radius*2, 0, TRF_BLOCKSELF|TRF_SOLIDACTORS, offsetz: 8, data:FootSurfaceData);
		FLineTraceData SkullSurfaceData;
		owner.LineTrace(atan2(owner.vel.y, owner.vel.x), owner.radius*2, 0, TRF_BLOCKSELF|TRF_SOLIDACTORS, offsetz: owner.height - 8, data:SkullSurfaceData);
		
		if (SkullSurfaceData.HitType == SkullSurfaceData.TRACE_HitWall && FootSurfaceData.HitType == FootSurfaceData.TRACE_HitWall)
		{
			if (meta_developer)
				Console.printf("Hooking totally blocked, abort");
			master.Destroy();
		} else if (SkullSurfaceData.HitType == SkullSurfaceData.TRACE_HitWall)
		{
			if (meta_developer)
				Console.printf("Hooking blocked at head, push down");
			master.vel.z = -8;
		} else if (FootSurfaceData.HitType == FootSurfaceData.TRACE_HitWall)
		{
			if (meta_developer)
				Console.printf("Hooking blocked at feet, push up");
			master.vel.z = 8;
		}
	}
}